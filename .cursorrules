When making changes to the code:
- After performing fixes also modify CHANGELOG.md (add to unreleased section) and general documentation in docs/. Note that changelog is cumulative so dont replace content there - add stuff.
- **Before adding to CHANGELOG.md, check if the current changes are already documented there. If they are:**
  - For CHANGELOG.md: Only add if it's a genuinely new feature/fix not already listed in the unreleased section. If the feature/fix is already there, you may update details but don't add duplicate entries
  - Read both files first to understand the current implementation scope before adding new content
- Plan and investigate the implementation first before writing code, always ask for acceptance before starting to modify anything
- Remove any entries to the translation files that are no longer needed
- If you made any changes to the starter kit bump the starter kit version in main.ts
- Avoid code duplication, create reusable functions and components

If asked to release a new version:
- node scripts/version.js X.X.X
- update the CHANGELOG.md (unreleased -> X.X.X + new empty unreleased section)

To regenerate starter kit data:
node scripts/generate-starter-kit.mjs

To clean up unused translation keys:
node scripts/translation-cleanup.mjs - it automatically analyzes translation key consistency between EN/PL files, scans TypeScript source files for t() translation calls, and identifies unused translation keys (removes them) and missing translation keys (adds them with placeholders). Also detects inconsistencies between EN/PL translation files, sorts all translation keys alphabetically, and provides detailed reports with suggestions for manual fixes.

To check if the plugin builds correctly:
npm run build

## Changelogs

the past entries there are not good

# Changelog Writing Guidelines

## Core Principles
- Write for non-technical users (psychologists, business people, marketers)
- Focus on user benefits and value, not technical details
- Use clear, simple language that anyone can understand
- Keep entries concise and scannable

## Content Guidelines
- Focus on what users can now do that they couldn't before
- Explain benefits in user-friendly terms
- Use active voice and present tense
- Include concrete examples of new features
- Only mention significant bug fixes that impact user experience

## Format Examples
Good:
- "Life Navigator mode is now available to help guide you through your daily tasks"
- "Menu items are now at the top for easier access"
- "Notes save automatically so you never lose your work"

Bad:
- "Fixed bug in note saving mechanism"
- "Implemented new UI component for menu positioning"
- "Added error handling for edge cases"

## Purpose
The changelog should help users understand how new features and improvements benefit them personally. Focus on the "what's in it for me" aspect to engage and excite the community.

## Rembember

REMEMBER ALWAYS ASK FOR USER ACCEPTANCE BEFORE STARTING TO MODIFY ANYTHING