When making changes to the code:
- After performing fixes also modify CHANGELOG.md (add to unreleased section) and general documentation in docs/ and library/Docs/. Note that changelog is cumulative so dont replace content there - add stuff.
- **Before adding to CHANGELOG.md, check if the current changes are already documented there. If they are:**
  - For CHANGELOG.md: Only add if it's a genuinely new feature/fix not already listed in the unreleased section. If the feature/fix is already there, you may update details but don't add duplicate entries
  - Read both files first to understand the current implementation scope before adding new content
- Plan and investigate the implementation first before writing code, always ask for acceptance before starting to modify anything
- Remove any entries to the translation files that are no longer needed
- Avoid code duplication, create reusable functions and components

If asked to release a new version:
- node scripts/version.js X.X.X
- update the CHANGELOG.md (unreleased -> X.X.X + new empty unreleased section)

To clean up unused translation keys:
node scripts/translation-cleanup.mjs - it automatically analyzes translation key consistency between EN/PL files, scans TypeScript source files for t() translation calls, and identifies unused translation keys (removes them) and missing translation keys (adds them with placeholders). Also detects inconsistencies between EN/PL translation files, sorts all translation keys alphabetically, and provides detailed reports with suggestions for manual fixes.

To check if the plugin builds correctly:
npm run build

## Changelogs

the past entries there are not good

# Changelog Writing Guidelines

## Core Principles
- Write for non-technical users (psychologists, business people, marketers)
- Focus on user benefits and value, not technical details
- Use clear, simple language that anyone can understand
- Keep entries concise and scannable

## Content Guidelines
- Focus on what users can now do that they couldn't before
- Explain benefits in user-friendly terms
- Use active voice and present tense
- Include concrete examples of new features
- Only mention significant bug fixes that impact user experience


## Format Examples
Good:
- "Life Navigator mode is now available to help guide you through your daily tasks"
- "Menu items are now at the top for easier access"
- "Notes save automatically so you never lose your work"

Bad:
- "Fixed bug in note saving mechanism"
- "Implemented new UI component for menu positioning"
- "Added error handling for edge cases"

## Purpose
The changelog should help users understand how new features and improvements benefit them personally. Focus on the "what's in it for me" aspect to engage and excite the community.

# Style guide

When doing anything related to styling, including creating new components, ahead of it (for example ahead of of figuring out what classes to use) read docs/style-guide.md and follow the guidelines there.

## Task Management Workflow

### Workflow Commands

The following commands trigger specific workflow phases for structured task implementation:

#### "go" Command - Task Disposer
When the user types "go", execute the task disposer script:

1. **Run Task Disposer**
   - Execute `node scripts/task-disposer.mjs` to fetch the next available task from the backlog
   - The script will:
     - Find the first unclaimed task in the backlog.md file (tasks with `- [ ]`)
     - Mark it as claimed by changing `- [ ]` to `- [?]` and adding project identification
     - Create a `task.md` file with the task content
     - Display the claimed task for the user to work on

2. **Post-Task Setup**
   - Read the created `task.md` file to understand the task requirements
   - Begin implementation planning and research based on the task content
   - Follow all existing code guidelines (styles, changelog, documentation)
   - **ALWAYS ASK FOR USER ACCEPTANCE BEFORE STARTING TO MODIFY ANYTHING**

#### "r" Command - Final Review & Commit Preparation
When the user types "r", execute the final review using the automated script:

1. **Run Final Review Script**
   - Execute `node scripts/final-review.mjs` to perform comprehensive automated review
   - The script will:
     - Read task.md file to understand the current task context
     - Check for staged changes (exits if none found)
     - Run build process (`npm run build`) to validate code
     - Run translation cleanup (`node scripts/translation-cleanup.mjs`)
     - Use Anthropic Claude AI to review staged changes for:
       - Code quality and best practices
       - Documentation compliance
       - Translation handling
       - Style consistency
       - Changelog requirements
       - Testing considerations
       - Potential issues
     - Generate AI-powered commit message based on changes and task context
     - Provide comprehensive final summary with recommendations

2. **Review Results**
   - The script provides detailed feedback on:
     - **Build Status**: Whether the code compiles successfully
     - **Translation Status**: Any translation key issues
     - **AI Review**: Comprehensive code analysis with recommendation (APPROVE/MINOR ISSUES/MAJOR ISSUES/REJECT)
     - **Commit Message**: AI-generated commit message following project conventions
   
3. **Final Recommendations**
   - **READY TO COMMIT**: All checks passed, ready to commit with suggested message
   - **COMMIT WITH CAUTION**: Minor issues noted but not blocking
   - **DO NOT COMMIT**: Critical issues must be resolved first

4. **Commit Process**
   - If approved by the script, use the generated commit message
   - Execute: `git commit -m "generated_commit_message"`
   - Clean up task.md file after successful commit

**Requirements for Final Review:**
- Must have a `task.md` file describing the work done
- Must have staged changes (`git add` your files first)
- Requires ANTHROPIC_API_KEY environment variable for AI review
- All critical issues must be resolved before committing

### Workflow Rules

- **Sequential Execution**: Commands must be used in order (go → r → c)
- **User Approval Required**: Each phase requires explicit user approval before proceeding
- **Comprehensive Planning**: The "go" command must include thorough research and planning
- **Quality Assurance**: The "r" command ensures code quality and completeness
- **Clean Commits**: The "c" command creates well-documented commits

### Task.md File Format

The task.md file should follow this structure:

```markdown
# Task: [Task Title]

## Original Task Description
[Initial task request from user]

## Implementation Plan
[Detailed plan as presented to user]

## Progress Tracking
- [ ] Research and planning
- [ ] Implementation started
- [ ] Core functionality complete
- [ ] Testing complete
- [ ] Documentation updated
- [ ] Task completed

## Implementation Notes
[Ongoing notes during implementation]
- [Timestamp] Decision: [description]
- [Timestamp] Challenge: [problem and solution]
- [Timestamp] Alteration: [change from original plan]

## Changes and Alterations
[Major changes from original plan]
- Original: [what was planned]
- Changed to: [what was actually implemented]
- Reason: [why the change was made]

## Completion Notes
[Final notes, remaining issues, future considerations]
```

### Example Usage

```
User: go
Assistant: What task would you like me to work on?
User: Add a new button component with primary and secondary variants
Assistant: [conducts research and planning]
Assistant: Here's my implementation plan... Do you approve this plan? Type 'yes' to proceed.
User: yes
Assistant: [creates task.md and implements the feature while updating progress]

User: r
Assistant: [reviews implementation, updates task.md with completion notes, and prepares commit message]
Assistant: Proposed commit message: "feat: add reusable button component with primary/secondary variants"

User: c
Assistant: Ready to commit with this message? Type 'yes' to proceed.
User: yes
Assistant: [commits the changes and deletes task.md]
```

## Rembember

REMEMBER ALWAYS ASK FOR USER ACCEPTANCE BEFORE STARTING TO MODIFY ANYTHING