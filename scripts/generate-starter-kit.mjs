import fs from "fs";
import path from "path";

const projectRoot = process.cwd();
const localesDir = path.join(projectRoot, "src", "locales");
const generatedDir = path.join(projectRoot, "src", "generated");
const outputDataFile = path.join(generatedDir, "starter-kit-data.ts");

/**
 * Recursively scans a directory for files and builds a structured array of starter kit files
 * @param {string} baseDir - The base directory for this language's starter kit
 * @returns {Array<{subPath: string, filename: string, content: string}>} - Array of file objects
 */
function scanStarterKitDirectory(baseDir) {
  const starterKitFiles = [];
  
  function scanDir(currentDir, relativePath = "") {
    if (!fs.existsSync(currentDir)) {
      console.warn(`Directory does not exist: ${currentDir}`);
      return;
    }
    
    const entries = fs.readdirSync(currentDir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(currentDir, entry.name);
      
      if (entry.isDirectory()) {
        // Recursively scan subdirectories
        scanDir(fullPath, path.join(relativePath, entry.name));
      } else if (entry.isFile() && entry.name.endsWith('.md')) {
        // Process Markdown files
        try {
          const content = fs.readFileSync(fullPath, 'utf-8');
          const subPath = relativePath; // This is the directory structure beneath the language
          const filename = entry.name;
          
          starterKitFiles.push({
            subPath,
            filename,
            content: content.trim()
          });
        } catch (error) {
          console.error(`Error reading file ${fullPath}:`, error);
        }
      }
    }
  }
  
  scanDir(baseDir);
  return starterKitFiles;
}

/**
 * Generates the starter kit data by scanning locales directories
 * @returns {Object} - Object with language codes as keys and arrays of file data as values
 */
function generateStarterKitData() {
  const starterKitData = {};
  
  // Get all language directories
  const langDirs = fs.readdirSync(localesDir)
    .filter(entry => fs.statSync(path.join(localesDir, entry)).isDirectory());
  
  for (const lang of langDirs) {
    const starterKitBasePath = path.join(localesDir, lang, "starter-kit");
    
    if (fs.existsSync(starterKitBasePath)) {
      const files = scanStarterKitDirectory(starterKitBasePath);
      
      if (files.length > 0) {
        starterKitData[lang] = files;
        console.log(`Found ${files.length} starter kit files for language: ${lang}`);
      } else {
        console.warn(`No starter kit files found for language: ${lang}`);
      }
    } else {
      console.warn(`Starter kit directory does not exist for language: ${lang}`);
    }
  }
  
  return starterKitData;
}

function generateStarterKitDataFile() {
  if (!fs.existsSync(generatedDir)) {
    fs.mkdirSync(generatedDir, { recursive: true });
  }
  
  const starterKitData = generateStarterKitData();
  
  // Check if we have data
  const languagesWithFiles = Object.keys(starterKitData);
  if (languagesWithFiles.length === 0) {
    console.warn("No starter kit files found in any language! Check your directory structure.");
  } else {
    console.log(`Found starter kit files for ${languagesWithFiles.length} languages: ${languagesWithFiles.join(', ')}`);
  }

  const typesAndInterfaces = `
export interface StarterKitFile {
  subPath: string;
  filename: string;
  content: string;
}

export interface StarterKitData {
  [language: string]: StarterKitFile[];
}
`;

  const dataConstant = `
export const STARTER_KIT_DATA: StarterKitData = ${JSON.stringify(starterKitData, null, 2)};
`;

  const fileContent = `// Auto-generated by scripts/generate-starter-kit.mjs
${typesAndInterfaces}
${dataConstant}
`;

  fs.writeFileSync(outputDataFile, fileContent);
  console.log(`Generated ${outputDataFile}`);
}

generateStarterKitDataFile();
console.log("Starter kit data generation complete."); 